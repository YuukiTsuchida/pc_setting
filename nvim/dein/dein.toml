[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
colorscheme solarized
set background=dark
let g:solarized_termcolors=256
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
call denite#custom#var('file_rec', 'command',['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

function! DeniteFileCreate(path)
   call denite#start([{'name': 'file', 'args': ['new', a:path]}])
endfunction
command! -nargs=* DeniteFileNew call DeniteFileCreate(<f-args>)

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
    \   'javascript': ['eslint'],
    \   'python': ['flake8'],
    \   'cs': ['OmniSharp'],
    \   'c': ['clangd'],
    \   'cpp': ['clangd'],
    \   'rust': ['rls']
    \ }

let g:ale_fixers = {
      \ 'javascript': ['prettier'],
      \ 'python': ['black', 'autopep8', 'isort'],
      \ 'markdown': [
      \   {buffer, lines -> {'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t', 'read_temporary_file': 1}}
      \   ],
      \ 'cpp': ['clang-format'],
      \ 'rust': ['rustfmt']
      \ }

" 各ツールの実行オプションを変更してPythonパスを固定
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8 --aggressive --aggressive'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'

let g:ale_rust_rls_executable = 'rust-analyzer'

" 保存ときのフォーマット
let g:ale_fix_on_save = 1
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

" ロケーションリストの代わりにQuickFixを使用する
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" エラーと警告の一覧を見るためにウィンドウを開いておく
let g:ale_open_list = 1

" シンボルカラムを表示したままにする
let g:ale_sign_column_always = 1
" 補完してくれる
let g:ale_completion_enabled = 1

" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
'''


[[plugins]]
repo = 'kien/ctrlp.vim'
hnook_add = '''
if executable('ag')
  let g:ctrlp_use_caching = 0
  let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
endif
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'gregsexton/gitv'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_color_change_percent=30
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:solarized_termtrans = 1
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey
hi IndentGuidesOdd  guibg=red   ctermbg=3
hi IndentGuidesEven guibg=green ctermbg=4
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
nnoremap - :Switch<cr>
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
" \sc でカーソル行をコメントアウトor解除
nmap \sc <Plug>(caw:I:toggle)
vmap \sc <Plug>(caw:I:toggle)
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
let g:undotree_WindowLayout = 2
nnoremap <F8> :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <F9> :Defx -resume -columns=git:mark:filename:type<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> l defx#do_action('open')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> D defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> n defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
endfunction

'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : 'M',
  \ 'Staged'    : 'S',
  \ 'Untracked' : 'U',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

nmap <silent> gd <Plug>(coc-definition)

"スペースfmtでFormat
nmap <silent> <space>fmt <Plug>(coc-format)
'''

# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# nnoremap <F9> :NERDTreeToggle<CR>
# '''
#
# [[plugins]]
# repo = 'Xuyuanp/nerdtree-git-plugin'


# [[plugins]]
# repo = 'idanarye/vim-merginal'


# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#auto_complete_start_length = 1
# '''

# [[plugins]]
# repo = 'ozelentok/denite-gtags'
# hook_add = '''
# '''
